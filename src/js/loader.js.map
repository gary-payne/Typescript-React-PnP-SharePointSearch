{"version":3,"sources":["loader.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwKE","file":"loader.js","sourcesContent":["/*\r\n//from https://github.com/thomasboyt/react-spin\r\n\r\nimport * as React from 'react';\r\nimport Spinner from './node_modules/spin.js';\r\n\r\ninterface IReactSpinnerProps {\r\n    // This object is passed in wholesale as the spinner config\r\n    config: any,\r\n    // This is a quick way to overwrite just the color on the config\r\n    color: string\r\n}\r\n\r\nexport default class ReactSpinner extends React.Component<IReactSpinnerProps,{}> {\r\n  private spinner: Spinner;\r\n  static defaultProps = {\r\n    config: {},\r\n    color: 'black',\r\n  }\r\n\r\n  constructor(props: IReactSpinnerProps) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const {color, config} = this.props;\r\n    const spinConfig = {\r\n      // a few sensible defaults\r\n      width: 2,\r\n      radius: 10,\r\n      length: 7,\r\n      // color should not overwrite config\r\n      color,\r\n      // config will overwrite anything else\r\n      config,\r\n    };\r\n\r\n    this.spinner = new Spinner(spinConfig);\r\n    this.spinner.spin(this.refs.container);\r\n  }\r\n  componentWillUnmount() {\r\n    this.spinner.stop();\r\n  }\r\n  render() {\r\n    return <span ref=\"container\"/>;\r\n  }\r\n}\r\n\r\n\r\n\r\n// From https://github.com/TheCognizantFoundry/react-loader/blob/master/lib/react-loader.jsx\r\n\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\ninterface ILoaderProps  { \r\n    className: string, \r\n    color: string, \r\n    component: any, \r\n    corners: number, \r\n    direction: any, \r\n    hwaccell: boolean, \r\n    left: string, \r\n    length: number, \r\n    lines: number, \r\n    loaded: boolean, \r\n    loadedClassName: string, \r\n    opacity: number, \r\n    options: any, \r\n    parentClassName: string, \r\n    radius: number, \r\n    rotate:number, \r\n    scale: number, \r\n    shadow: boolean, \r\n    speed: number, \r\n    top: string, \r\n    trail: number, \r\n    width: number, \r\n    zIndex: number \r\n  };\r\n\r\nexport class Loader extends React.Component<ILoaderProps,ILoaderProps>{ \r\n\r\n  constructor(props: ILoaderProps) {\r\n        super(props);\r\n        this.state = { \r\n            component: 'div', \r\n            loadedClassName: 'loadedContent', \r\n            parentClassName: 'loader' \r\n        };  \r\n  }\r\n\r\n  getDefaultProps () { \r\n    return { \r\n      component: 'div', \r\n      loadedClassName: 'loadedContent', \r\n      parentClassName: 'loader' \r\n    }; \r\n  } \r\n\r\n  componentDidMount () { \r\n    this.updateState(this.props); \r\n  } \r\n\r\n  componentWillReceiveProps (nextProps) { \r\n    this.updateState(nextProps); \r\n  } \r\n\r\n  updateState (props) { \r\n    props || (props = {}); \r\n\r\n    var loaded = this.state.loaded; \r\n    var options = this.state.options; \r\n\r\n    // update loaded state, if supplied \r\n    if ('loaded' in props) { \r\n      loaded = !!props.loaded; \r\n    } \r\n\r\n    // update spinner options, if supplied \r\n    var allowedOptions = Object.keys(this.state); \r\n    allowedOptions.splice(allowedOptions.indexOf('loaded'), 1); \r\n    allowedOptions.splice(allowedOptions.indexOf('options'), 1); \r\n\r\n    // allows passing options as either props or as an option object \r\n    var propsOrObjectOptions = 'options' in props ? props.options : props; \r\n\r\n    allowedOptions.forEach(function (key) { \r\n      if (key in propsOrObjectOptions) { \r\n        options[key] = propsOrObjectOptions[key]; \r\n      } \r\n    }); \r\n\r\n    this.setState({ loaded: loaded, options: options }, this.spin); \r\n  }, \r\n\r\n\r\n  spin () { \r\n    var canUseDOM = !!( \r\n      typeof window !== 'undefined' && \r\n      window.document && \r\n      window.document.createElement \r\n    ); \r\n\r\n    if (canUseDOM && this.isMounted() && !this.state.loaded) { \r\n      var spinner = new Spinner(this.state.options); \r\n      var target =  ReactDOM.findDOMNode(this.refs.loader); \r\n\r\n\r\n      // clear out any other spinners from previous renders \r\n       target.innerHTML = ''; \r\n       spinner.spin(target); \r\n     } \r\n   } \r\n\r\n   render() { \r\n     var props, children; \r\n\r\n     if (this.state.loaded) { \r\n       props = { key: 'content', className: this.props.loadedClassName }; \r\n       children = this.props.children; \r\n     } else { \r\n       props = { key: 'loader', ref: 'loader', className: this.props.parentClassName }; \r\n     } \r\n\r\n     return React.createElement(this.props.component, props, children); \r\n   } \r\n }; \r\n*/"],"sourceRoot":"/source/"}